MAKE SPECS PASS the move on :)
specs have been abstracted where possible, review all specs and write content area idiosyncratic specs as well as addtional integrations specs for:
> contentArea event emissions in response to the resizing of the boundary box and vice-versa
> contentArea event emissions for border size changes (which do not cause the boundary box to resize).

THEN: introduce abstract box specs onto content area

contentArea should have its own onResized event which is emitted when the border size is changed (and when the boundary box is resized)

SPEC that the contentArea onResized/onMoved events are emitted when the boundary box is resize/moved and vice-versa

CSS filtering for position ?! spec + implement


> 










contentArea should have its own onMoved event which is emitted when the border size is changed (and when the boundary box is repositioned)


> What happens when I resize a box smaller than its border allows?

1:
  
  c: finish impl superview.restrictions INCL additional resize() AND moveTo() specs to prevent resizing and moving beyond restritions

-> remove the dependency on z() - it's not worth it for just one simple use case

-> VISUAL_SPECS for constraints

  d: contentArea()
    > size changes when its superview's border is set
    > view.contentArea().[resize|moveTo|size|position|restrictTo|anchorTo]()
    > reintroduce page/window specs
  e: get rid of Superview#$() replace with elem() => HTMLElement
  
put restrictions() functionality in superview.restrictions and likewise for similar behaviour
modularize: viewtree+rect are standard, anchoring is a mixin (but all superviews have it)

2: padding and border css intercepts -> trigger event
3: refactor anchoring and fix fractional positioning bug (if it still exists?)
?4: detect and refuse cyclic anchoring
5: ancestor anchoring behaviour revision
6: anchorRestrictionTo handling - if it's quick to do
7: fix draggable with padding/border bug

> anchorTo restriction callback

>: if I bind a box to the right of something and then resize it, it should still stick to the right
        > visual spec
        > spec
>: if I bind to the right of an ancestor I don't want it's right position, I want width (similar with bottom/height)
        > visual spec
        > spec

?> change to use api like Superview.extend({}) rather than MyView() { Object.extend(this).withMixin(Superview)}

>: dragging with a border sent the position F**king crazy

>: raise an error if there are cyclic anchorings

>: setting paddings and borders causes a resize .css({}) intercept border/padding changes

>: RETEST visual and spec: fractional layouts anchorTo(..., {left: 0.5})

>: bounds (max/min inner/outer Top|Left|Right|Bottom|Width|Height) should be anchorable too! bounds() and anchorBoundsTo()

>: run tests and view visuals in Safari and Firefox and on the iPad

> calls to css() for top,left,right,bottom,width,height should result in a call to resize/moveTo
> review and document initialization protocol
> add presenter getter/setter
> review controller setter/getter
> filter CSS position to only allow absolute, and relative IFF the superview is a root. WHAT ABOUT position: fixed?
  
